/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.JobrunrMigrationsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobrunrMigrations extends TableImpl<JobrunrMigrationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.jobrunr_migrations</code>
     */
    public static final JobrunrMigrations JOBRUNR_MIGRATIONS = new JobrunrMigrations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobrunrMigrationsRecord> getRecordType() {
        return JobrunrMigrationsRecord.class;
    }

    /**
     * The column <code>public.jobrunr_migrations.id</code>.
     */
    public final TableField<JobrunrMigrationsRecord, String> ID = createField(DSL.name("id"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.jobrunr_migrations.script</code>.
     */
    public final TableField<JobrunrMigrationsRecord, String> SCRIPT = createField(DSL.name("script"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.jobrunr_migrations.installedon</code>.
     */
    public final TableField<JobrunrMigrationsRecord, String> INSTALLEDON = createField(DSL.name("installedon"), SQLDataType.VARCHAR(29).nullable(false), this, "");

    private JobrunrMigrations(Name alias, Table<JobrunrMigrationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobrunrMigrations(Name alias, Table<JobrunrMigrationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.jobrunr_migrations</code> table reference
     */
    public JobrunrMigrations(String alias) {
        this(DSL.name(alias), JOBRUNR_MIGRATIONS);
    }

    /**
     * Create an aliased <code>public.jobrunr_migrations</code> table reference
     */
    public JobrunrMigrations(Name alias) {
        this(alias, JOBRUNR_MIGRATIONS);
    }

    /**
     * Create a <code>public.jobrunr_migrations</code> table reference
     */
    public JobrunrMigrations() {
        this(DSL.name("jobrunr_migrations"), null);
    }

    public <O extends Record> JobrunrMigrations(Table<O> child, ForeignKey<O, JobrunrMigrationsRecord> key) {
        super(child, key, JOBRUNR_MIGRATIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<JobrunrMigrationsRecord> getPrimaryKey() {
        return Keys.JOBRUNR_MIGRATIONS_PKEY;
    }

    @Override
    public List<UniqueKey<JobrunrMigrationsRecord>> getKeys() {
        return Arrays.<UniqueKey<JobrunrMigrationsRecord>>asList(Keys.JOBRUNR_MIGRATIONS_PKEY);
    }

    @Override
    public JobrunrMigrations as(String alias) {
        return new JobrunrMigrations(DSL.name(alias), this);
    }

    @Override
    public JobrunrMigrations as(Name alias) {
        return new JobrunrMigrations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrMigrations rename(String name) {
        return new JobrunrMigrations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrMigrations rename(Name name) {
        return new JobrunrMigrations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
