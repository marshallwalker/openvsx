/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.JobrunrJobsStatsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobrunrJobsStats extends TableImpl<JobrunrJobsStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.jobrunr_jobs_stats</code>
     */
    public static final JobrunrJobsStats JOBRUNR_JOBS_STATS = new JobrunrJobsStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobrunrJobsStatsRecord> getRecordType() {
        return JobrunrJobsStatsRecord.class;
    }

    /**
     * The column <code>public.jobrunr_jobs_stats.total</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> TOTAL = createField(DSL.name("total"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.awaiting</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> AWAITING = createField(DSL.name("awaiting"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.scheduled</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> SCHEDULED = createField(DSL.name("scheduled"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.enqueued</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> ENQUEUED = createField(DSL.name("enqueued"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.processing</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> PROCESSING = createField(DSL.name("processing"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.failed</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> FAILED = createField(DSL.name("failed"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.succeeded</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> SUCCEEDED = createField(DSL.name("succeeded"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.alltimesucceeded</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> ALLTIMESUCCEEDED = createField(DSL.name("alltimesucceeded"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.deleted</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> DELETED = createField(DSL.name("deleted"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.nbrofbackgroundjobservers</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> NBROFBACKGROUNDJOBSERVERS = createField(DSL.name("nbrofbackgroundjobservers"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jobrunr_jobs_stats.nbrofrecurringjobs</code>.
     */
    public final TableField<JobrunrJobsStatsRecord, Long> NBROFRECURRINGJOBS = createField(DSL.name("nbrofrecurringjobs"), SQLDataType.BIGINT, this, "");

    private JobrunrJobsStats(Name alias, Table<JobrunrJobsStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobrunrJobsStats(Name alias, Table<JobrunrJobsStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"jobrunr_jobs_stats\" as  SELECT count(*) AS total,\n    ( SELECT count(*) AS count\n           FROM jobrunr_jobs jobs\n          WHERE ((jobs.state)::text = 'AWAITING'::text)) AS awaiting,\n    ( SELECT count(*) AS count\n           FROM jobrunr_jobs jobs\n          WHERE ((jobs.state)::text = 'SCHEDULED'::text)) AS scheduled,\n    ( SELECT count(*) AS count\n           FROM jobrunr_jobs jobs\n          WHERE ((jobs.state)::text = 'ENQUEUED'::text)) AS enqueued,\n    ( SELECT count(*) AS count\n           FROM jobrunr_jobs jobs\n          WHERE ((jobs.state)::text = 'PROCESSING'::text)) AS processing,\n    ( SELECT count(*) AS count\n           FROM jobrunr_jobs jobs\n          WHERE ((jobs.state)::text = 'FAILED'::text)) AS failed,\n    ( SELECT count(*) AS count\n           FROM jobrunr_jobs jobs\n          WHERE ((jobs.state)::text = 'SUCCEEDED'::text)) AS succeeded,\n    ( SELECT ((jm.value)::character(10))::numeric(10,0) AS value\n           FROM jobrunr_metadata jm\n          WHERE ((jm.id)::text = 'succeeded-jobs-counter-cluster'::text)) AS alltimesucceeded,\n    ( SELECT count(*) AS count\n           FROM jobrunr_jobs jobs\n          WHERE ((jobs.state)::text = 'DELETED'::text)) AS deleted,\n    ( SELECT count(*) AS count\n           FROM jobrunr_backgroundjobservers) AS nbrofbackgroundjobservers,\n    ( SELECT count(*) AS count\n           FROM jobrunr_recurring_jobs) AS nbrofrecurringjobs\n   FROM jobrunr_jobs j;"));
    }

    /**
     * Create an aliased <code>public.jobrunr_jobs_stats</code> table reference
     */
    public JobrunrJobsStats(String alias) {
        this(DSL.name(alias), JOBRUNR_JOBS_STATS);
    }

    /**
     * Create an aliased <code>public.jobrunr_jobs_stats</code> table reference
     */
    public JobrunrJobsStats(Name alias) {
        this(alias, JOBRUNR_JOBS_STATS);
    }

    /**
     * Create a <code>public.jobrunr_jobs_stats</code> table reference
     */
    public JobrunrJobsStats() {
        this(DSL.name("jobrunr_jobs_stats"), null);
    }

    public <O extends Record> JobrunrJobsStats(Table<O> child, ForeignKey<O, JobrunrJobsStatsRecord> key) {
        super(child, key, JOBRUNR_JOBS_STATS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public JobrunrJobsStats as(String alias) {
        return new JobrunrJobsStats(DSL.name(alias), this);
    }

    @Override
    public JobrunrJobsStats as(Name alias) {
        return new JobrunrJobsStats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrJobsStats rename(String name) {
        return new JobrunrJobsStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobrunrJobsStats rename(Name name) {
        return new JobrunrJobsStats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
